// Custom mixins.
// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: '?',
    svg: '#' + str-replace($name, ' ', '_')
  );

  $formats: (
    otf: 'opentype',
    ttf: 'truetype'
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url('../' + quote($path + '.' + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

@mixin jeles-regularregular {
  font-family: "jeles_regularregular", sans-serif;
}

@mixin gotham-book {
  font-family: "gotham_book", sans-serif;
}

@mixin dinpro-condmedium {
  font-family: "Dinpro_condmedium", Helvetica, Arial, sans-serif;
}

@mixin helvetica {
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
}

//Single image background with retina support
//USAGE:  @include background-image-retina('preloader', 'GIF', rem(20px), rem(20px));
@mixin background-image-retina($image-1x, $image-2x, $width, $height) {
  background-image: url($image-path + $image-1x);

  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    background-image: url($image-path + $image-2x);
    background-size: $width $height;
  }
}

// Add demo label for responsive info.
@mixin show-breakpoints {
  &:after {
    background-color: $pigeon-post-light;
    border-radius: 20px;
    bottom: rem(20px);
    box-shadow: 0 1px 10px $gray;
    color: $black;
    content: 'Mobile';
    display: block;
    font-size: rem(16px);
    padding: rem(5px 10px);
    position: fixed;
    right: rem(20px);
    z-index: 1000;

    @include susy-media(tablet) {
      content: 'Tablet' !important;
    }

    @include susy-media(desktop) {
      content: 'Small desktop' !important;
    }
  }
}

@mixin index-link {
  position: fixed;
  bottom: rem(20px);
  left: rem(20px);
  padding: rem(5px 10px);
  border-radius: 20px;
  display: block;
  color: $black;
  background-color: $pigeon-post-light;
  z-index: 1000;
  user-select: none;
}


// Clearfix as mixin.
@mixin clearfix {
  &:before,
  &:after {
    content: '';
    display: table;
  }

  &:after {
    clear: both;
  }
}



//layout mixins - start

@mixin qodefTableLayout(){
    position: relative;
    display: table;
    table-layout: fixed;
    height: 100%;
    width: 100%;
}

@mixin qodefTableCellLayout(){
    position: relative;
    display: table-cell;
    height: 100%;
    width: 100%;
    vertical-align: middle;
    text-align: center;
}

//layout mixins - end

//transition mixins - start

@mixin qodefTransition($transition-param...) {
    -webkit-transition: $transition-param;
    transition: $transition-param;
}

@mixin qodefTransform($transform-param...) {
    -webkit-transform: $transform-param;
  -ms-transform: $transform-param;
    transform: $transform-param;
}

@mixin qodefAnimation($animation-param...) {
  -webkit-animation: $animation-param;
  animation: $animation-param;
}

@mixin qodefTransformOrigin($animation-param...) {
  -webkit-transform-origin: $animation-param;
  -ms-transform-origin: $animation-param;
    transform-origin: $animation-param;
}

@mixin qodefBoxShadow($shadow-property...) {
    -webkit-box-shadow: $shadow-property;
    -moz-box-shadow: $shadow-property;
    box-shadow: $shadow-property;
}

@mixin qodefBorderRadius($border-radius...) {
    -webkit-border-radius: $border-radius;
    -moz-border-radius: $border-radius;
    border-radius: $border-radius;
}

@mixin qodefBorderRadiusPredefined() {
    -webkit-border-radius: 3px;
    -moz-border-radius: 3px;
    border-radius: 3px;
}

@mixin qodefBoxSizing($box-sizing) {
    -webkit-box-sizing: $box-sizing;
    -moz-box-sizing: $box-sizing;
    box-sizing: $box-sizing;
}
//transition mixins - end

//media query mixins - start

@mixin laptop-landscape {
    @media only screen and (max-width: $laptop-landscape) {
        @content;
    }
}

@mixin ipad-landscape {
    @media only screen and (max-width: $ipad-landscape) {
        @content;
    }
}

@mixin ipad-portrait {
    @media only screen and (max-width: $ipad-portrait) {
        @content;
    }
}

@mixin phone-landscape {
    @media only screen and (max-width: $phone-landscape) {
        @content;
    }
}

@mixin ipad-landscape-min {
    @media only screen and (min-width: $ipad-landscape) {
        @content;
    }
}

@mixin phone-portrait {
    @media only screen and (max-width: $phone-portrait) {
        @content;
    }
}

@mixin smaller-phone-portrait {
    @media only screen and (max-width: $smaller-phone-portrait) {
        @content;
    }
}

//media query mixins - end

//animation mixin - start

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} { @content };
    @keyframes #{$name} { @content };
}

@mixin animation ($name, $duration, $repeat, $timing, $delay) {
    -webkit-animation-name: $name;
    -webkit-animation-duration: $duration;
    -webkit-animation-iteration-count: $repeat;
    -webkit-animation-timing-function: $timing;
    -webkit-animation-delay: $delay;
    -webkit-animation-fill-mode: forwards; /* this prevents the animation from restarting! */

    animation-name: $name;
    animation-duration: $duration;
    animation-iteration-count: $repeat;
    animation-timing-function: $timing;
    animation-delay: $delay;
    animation-fill-mode: forwards; /* this prevents the animation from restarting! */
}

//animation mixin - end
